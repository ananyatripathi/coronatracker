{"version":3,"sources":["InfoBox.js","Table.js","util.js","Map.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","total","cases","bgcolor","Card","className","Typography","color","Table","countries","map","country","numeral","format","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","showDataOnMap","casesType","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","TileLayer","url","attribution","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","getCOuntriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","CardContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a101436.chunk.js","sourcesContent":["import { Card, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Infobox.css'\r\n\r\nconst InfoBox = ({title, total, cases, bgcolor}) => {\r\n  return(\r\n    <Card className=\"infobox\">\r\n        <Typography className=\"infobox_title\" color=\"textSecondary\">\r\n            {title}\r\n        </Typography>\r\n\r\n        <h2 className=\"infobox_cases\">{cases}</h2>\r\n\r\n        <Typography className=\"infobox_total\" color=\"textSecondary\">\r\n            {total} Total\r\n        </Typography>\r\n\r\n\r\n\r\n    </Card>\r\n   )\r\n\r\n }\r\n\r\nexport default InfoBox","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\n\r\nconst Table = ({countries}) => {\r\n  return(\r\n    <div className=\"table\">\r\n        {countries.map(({country, cases}) => \r\n            <tr>\r\n            <td>{country}</td>\r\n            <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n        </tr>\r\n        )}\r\n    </div>\r\n   )\r\n\r\n }\r\n\r\nexport default Table","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 400,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1000,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 1000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","\r\nimport React from 'react'\r\nimport {Map as LeafletMap, TileLayer} from 'react-leaflet'\r\nimport './Map.css'\r\nimport { showDataOnMap } from './util'\r\n\r\nconst Map = ({countries, casesType, center, zoom}) => {\r\n  return(\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n         url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n         attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n         />\r\n         {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    \r\n    </div>\r\n   )\r\n\r\n }\r\n\r\nexport default Map","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = 'cases') => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n        options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"#f53123\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","\nimport { FormControl, Menu, MenuItem, Select, Card, CardContent } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Table from './Table'\nimport Map from './Map'\nimport { prettyPrintStat, sortData } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css'\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] =useState([])\n  const [tableData, setTableData] =useState([])\n  const [mapCenter, setMapCenter] =useState\n  ({ lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] =useState([])\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data)\n    });\n  }, []);\n\n  useEffect(() => {\n    const getCOuntriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.iso2,\n        }));\n\n        const sortedData = sortData(data)\n        setMapCountries(data)\n        setTableData(sortedData)\n        setCountries(countries)\n\n      });\n      \n    };\n      \n      getCOuntriesData();\n  }, []);\n\n\n  const onCountryChange = async (event) => {\n    \n    const countryCode=event.target.value\n    \n\n    const url = countryCode === 'worldwide' \n    ? 'https://disease.sh/v3/covid-19/all' \n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      setCountry(countryCode)\n      setCountryInfo(data)\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  }; \n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n      <div className=\"app_header\">\n        <h1>CORONA VIRUS TRACKER</h1>\n        \n        <FormControl className=\"last\">\n        \n          <Select variant=\"outlined\" color=\"secondary\" onChange={onCountryChange} value={country}>\n            <MenuItem value=\"worldwide\" className=\"worldwide\">Worldwide</MenuItem>  \n            {countries.map((country) => (\n            <MenuItem value={country.name}>{country.name}</MenuItem>\n            ))}\n          </Select>\n          \n        </FormControl>\n        \n\n      </div>\n      <div className=\"app_stats\">\n        <InfoBox title=\"Covid-19 Cases\" total={prettyPrintStat(countryInfo.cases)} cases={prettyPrintStat(countryInfo.todayCases)}></InfoBox>\n\n        <InfoBox title=\"Covid-19 Recovered\" total={prettyPrintStat(countryInfo.recovered)} cases={prettyPrintStat(countryInfo.todayRecovered)}></InfoBox>\n\n        <InfoBox title=\"Covid-19 Deaths\" total={prettyPrintStat(countryInfo.deaths)} cases={prettyPrintStat(countryInfo.todayDeaths)}></InfoBox>\n      </div>\n      \n      <Map\n      countries={mapCountries}\n      center={mapCenter}\n      zoom={mapZoom}\n      />\n      </div>\n\n      <Card className=\"app_right\">\n        <CardContent className=\"right\">\n          <h3 className=\"sidebarhead\">Live Cases by Country</h3>\n          <Table countries={tableData}></Table>\n          \n          \n        </CardContent>\n        <h3 className=\"sidebarhead2\">World Wide Cases</h3>\n        <LineGraph></LineGraph>\n        </Card>\n\n      \n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}